# -*- coding: utf-8 -*-
"""DM-LeafDisease_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17sBgj_feRk81QWP_8owsAy5ShI_Akbvm

### Loading the Dataset
"""

from google.colab import drive
drive.mount('/content/drive')

!unzip drive/MyDrive/plantdataset.zip

"""### Pre-processing and Feature Extraction"""

import numpy as np
import cv2
import os
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Define the path to the folder containing the dataset
train_path = "/content/Plant_leave_diseases_dataset_ 1/"

# Define the size of the images
img_size = (64, 64)

# Function to extract features from an image
def extract_features(image_path):
    # Load the image
    img = cv2.imread(image_path)
    # Resize the image
    img = cv2.resize(img, img_size)
    # Normalize the image
    img = cv2.normalize(img, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)
    # Flatten the image into a 1D numpy array
    features = img.flatten()
    return features

# Function to load the training and labels
def load_data():
    # Initialize empty lists for images and labels
    train_images = []
    train_labels = []

    # Load the images and labels
    for folder in os.listdir(train_path):
        folder_path = os.path.join(train_path, folder)
        for file in os.listdir(folder_path):
            image_path = os.path.join(folder_path, file)
            features = extract_features(image_path)
            train_images.append(features)
            train_labels.append(folder)

    # Convert the lists to numpy arrays
    train_images = np.array(train_images)
    train_labels = np.array(train_labels)
    return train_images, train_labels

# Load the data
train_images, train_labels = load_data()

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(train_images, train_labels, test_size=0.2)

"""## KNN Classifier"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report
# Train the KNN classifier
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

# Predict the labels of the test images
y_pred = knn.predict(X_test)

# Print the classification report
report = classification_report(y_test, y_pred)
print("Classification report:\n", report)

# Evaluate the classifier on the testing set
accuracy = knn.score(X_test, y_test)
print("Accuracy:", accuracy)

"""## Random Forest Classifier"""

from sklearn.ensemble import RandomForestClassifier
# Train the random forest classifier
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Predict the labels of the test images
y_pred = rf.predict(X_test)

# Print the classification report
report = classification_report(y_test, y_pred)
print("Classification report:\n", report)

# Evaluate the classifier on the testing set
accuracy = rf.score(X_test, y_test)
print("Accuracy:", accuracy)

"""### SVM Classifier"""

from sklearn.svm import SVC
# Train the SVM classifier
svm = SVC(kernel='linear', C=1, gamma='auto')
svm.fit(X_train, y_train)

# Predict the labels of the test images
y_pred = svm.predict(X_test)

# Print the classification report
report = classification_report(y_test, y_pred)
print("Classification report:\n",report)

# Evaluate the classifier on the testing set
accuracy = svm.score(X_test, y_test)
print("Accuracy:", accuracy)

"""### Naive Bayes Classifier"""

from sklearn.naive_bayes import GaussianNB
# Train the Naive Bayes classifier
nb = GaussianNB()
nb.fit(X_train, y_train)

# Predict the labels of the test images
y_pred = nb.predict(X_test)

#Print the classification report
report = classification_report(y_test, y_pred)
print("Classification report:\n", report)

# Evaluate the classifier on the testing set
accuracy = nb.score(X_test, y_test)
print("Accuracy:", accuracy)

"""### Testing the model"""

import random
import matplotlib.pyplot as plt

# Select a random index from the test set
random_index = random.randint(0, len(X_test) - 1)

# Get the corresponding image and label
image = X_test[random_index]
label = y_test[random_index]

# Make a prediction on the image using the pre-trained model
prediction = nb.predict(image.reshape(1, -1))

# Print the predicted label and the true label
print("Predicted label:", prediction[0])
print("True label:", label)